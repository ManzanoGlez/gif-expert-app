{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","Components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","placeholder","getGifs","a","url","fetch","resp","json","data","gifs","map","img","info","title","split","replace","autor","id","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAGe,SAASA,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cAAiB,EAEjBC,mBAAS,IAFQ,mBAE9CC,EAF8C,KAElCC,EAFkC,KAiBrD,OACE,0BAAMC,SAVS,SAACC,GAChBA,EAAEC,iBAEEJ,EAAWK,OAAOC,QAAU,IAC9BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA6BO,OAC3CN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAlBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAkBnBG,YAAa,kB,2BC1BRC,EAAO,uCAAG,WAAON,GAAP,uBAAAO,EAAA,4DACL,mCACF,KAGRC,EALe,iDAGNR,EAHM,kBAEP,KAFO,oBACL,oCADK,SAOFS,MAAMD,GAPJ,cAOfE,EAPe,gBAQEA,EAAKC,OARP,uBAQbC,EARa,EAQbA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAExBC,EAAOD,EAAIE,MAAMC,MAAM,QACvBD,EAAQD,EAAK,GAAGG,QAAQ,MAAO,IAC/BC,EAAQJ,EAAK,GAEnB,MAAO,CACLK,GAAIN,EAAIM,GACRJ,QACAG,QACAZ,IAAG,UAAEO,EAAIO,cAAN,aAAE,EAAYC,iBAAiBf,QApBjB,kBAwBdK,GAxBc,4CAAH,sDCEL,SAASW,EAAT,GAAyC,EAAlBH,GAAmB,IAAfJ,EAAc,EAAdA,MAAOT,EAAO,EAAPA,IAC/C,OACE,yBAAKiB,UAAU,0CACb,yBAAKC,IAAKlB,EAAKmB,IAAKV,IACpB,2BAAIA,ICFK,SAASW,EAAT,GAAgC,IAAb5B,EAAY,EAAZA,SAAY,ECDlB,SAACA,GAAc,IAAD,EACdR,mBAAS,CACjCoB,KAAM,GACNiB,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACR1B,EAAQN,GAAUiC,MAAK,SAACC,GACpBH,EAAS,CACPnB,KAAMsB,EACNL,SAAS,SAGd,CAAC7B,IAEG8B,EDb0BK,CAAanC,GAAjCsB,EAD+B,EACpCV,KAAaiB,EADuB,EACvBA,QAErB,OACE,kBAAC,WAAD,KACE,wBAAIJ,UAAU,qCAAqCzB,GAEnD,yBAAKyB,UAAU,aACZI,GACC,wBAAIJ,UAAU,oCAAd,cAGDH,EAAOR,KAAI,SAACC,GAAD,OACV,kBAACS,EAAD,eAAaY,IAAKrB,EAAIM,IAAQN,SEbzB,SAASsB,IAAgB,IAAD,EAED7C,mBAAS,IAFR,mBAE9B8C,EAF8B,KAElB/C,EAFkB,KAKrC,OACE,6BACE,4CACA,6BAEA,kBAACD,EAAD,CAAaC,cAAeA,IAE5B,4BACG+C,EAAWxB,KAAI,SAACd,EAAUoC,GAAX,OACd,kBAACR,EAAD,CAASQ,IAAKA,EAAKpC,SAAUA,S,YCXvCuC,IAASC,OAAO,kBAACH,EAAD,MAAkBI,SAASC,eAAe,U","file":"static/js/main.e815d113.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function AddCategory({ setCategories }) {\n\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length >= 1) {\n      setCategories((category) => [inputValue,...category]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={onSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder={\"CategorÃ­a\"}\n      />\n    </form>\n  );\n}\n\n\nAddCategory.propTypes = {\n  setCategories : PropTypes.func.isRequired\n};\n","export const getGifs = async (category) => {\n  const api_key = \"WT2TzL7itLgNJv5qUSju8PWqOgcyhXrz\";\n  const limit = \"10\";\n  const search = category;\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${search}&limit=${limit}&api_key=${api_key}`;\n\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n   const gifs = data.map((img) => {\n\n    const info = img.title.split(\" by \");\n    const title = info[0].replace(\"GIF\", \"\");\n    const autor = info[1];\n\n    return {\n      id: img.id,\n      title,\n      autor,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\n\nexport default function GifGridItem({ id, title, url }) {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n}\n","import React, { Fragment } from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport GifGridItem from \"./GifGridItem\";\n\nexport default function GifGrid({ category }) {\n  const { data:images, loading } = useFetchGifs(category);\n\n  return (\n    <Fragment>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      <div className=\"card-grid\">\n        {loading && (\n          <h5 className=\"animate__animated animate__flash\">Cargando..</h5>\n        )}\n\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </Fragment>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n        setState({\n          data: imgs,\n          loading: false,\n        });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React,{useState} from \"react\";\nimport AddCategory from \"./AddCategory\";\nimport GifGrid from \"./GifGrid\";\n\nexport default function GifExpertApp() {\n\n  const [categories, setCategories] = useState([]);\n\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <hr />\n\n      <AddCategory setCategories={setCategories} />\n\n      <ol>\n        {categories.map((category, key) => (\n          <GifGrid key={key} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './Components/GifExpertApp';\n\nimport \"animate.css\";\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));"],"sourceRoot":""}